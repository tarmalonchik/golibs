// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package logger

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// LevelPanic is a Level of type panic.
	LevelPanic Level = "panic"
	// LevelFatal is a Level of type fatal.
	LevelFatal Level = "fatal"
	// LevelError is a Level of type error.
	LevelError Level = "error"
	// LevelWarn is a Level of type warn.
	LevelWarn Level = "warn"
	// LevelInfo is a Level of type info.
	LevelInfo Level = "info"
	// LevelDebug is a Level of type debug.
	LevelDebug Level = "debug"
)

var ErrInvalidLevel = errors.New("not a valid Level")

// LevelValues returns a list of the values for Level
func LevelValues() []Level {
	return []Level{
		LevelPanic,
		LevelFatal,
		LevelError,
		LevelWarn,
		LevelInfo,
		LevelDebug,
	}
}

// String implements the Stringer interface.
func (x Level) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Level) IsValid() bool {
	_, err := ParseLevel(string(x))
	return err == nil
}

var _LevelValue = map[string]Level{
	"panic": LevelPanic,
	"fatal": LevelFatal,
	"error": LevelError,
	"warn":  LevelWarn,
	"info":  LevelInfo,
	"debug": LevelDebug,
}

// ParseLevel attempts to convert a string to a Level.
func ParseLevel(name string) (Level, error) {
	if x, ok := _LevelValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LevelValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Level(""), fmt.Errorf("%s is %w", name, ErrInvalidLevel)
}
