// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package middleware

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// MiddlewareTypeNone is a MiddlewareType of type none.
	MiddlewareTypeNone MiddlewareType = "none"
	// MiddlewareTypeBasic is a MiddlewareType of type basic.
	MiddlewareTypeBasic MiddlewareType = "basic"
)

var ErrInvalidMiddlewareType = errors.New("not a valid MiddlewareType")

// MiddlewareTypeValues returns a list of the values for MiddlewareType
func MiddlewareTypeValues() []MiddlewareType {
	return []MiddlewareType{
		MiddlewareTypeNone,
		MiddlewareTypeBasic,
	}
}

// String implements the Stringer interface.
func (x MiddlewareType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MiddlewareType) IsValid() bool {
	_, err := ParseMiddlewareType(string(x))
	return err == nil
}

var _MiddlewareTypeValue = map[string]MiddlewareType{
	"none":  MiddlewareTypeNone,
	"basic": MiddlewareTypeBasic,
}

// ParseMiddlewareType attempts to convert a string to a MiddlewareType.
func ParseMiddlewareType(name string) (MiddlewareType, error) {
	if x, ok := _MiddlewareTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _MiddlewareTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return MiddlewareType(""), fmt.Errorf("%s is %w", name, ErrInvalidMiddlewareType)
}
