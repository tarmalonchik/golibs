// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package grpc

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// LogLevelPanic is a LogLevel of type panic.
	LogLevelPanic LogLevel = "panic"
	// LogLevelFatal is a LogLevel of type fatal.
	LogLevelFatal LogLevel = "fatal"
	// LogLevelError is a LogLevel of type error.
	LogLevelError LogLevel = "error"
	// LogLevelWarn is a LogLevel of type warn.
	LogLevelWarn LogLevel = "warn"
	// LogLevelInfo is a LogLevel of type info.
	LogLevelInfo LogLevel = "info"
	// LogLevelDebug is a LogLevel of type debug.
	LogLevelDebug LogLevel = "debug"
	// LogLevelTrace is a LogLevel of type trace.
	LogLevelTrace LogLevel = "trace"
)

var ErrInvalidLogLevel = errors.New("not a valid LogLevel")

// LogLevelValues returns a list of the values for LogLevel
func LogLevelValues() []LogLevel {
	return []LogLevel{
		LogLevelPanic,
		LogLevelFatal,
		LogLevelError,
		LogLevelWarn,
		LogLevelInfo,
		LogLevelDebug,
		LogLevelTrace,
	}
}

// String implements the Stringer interface.
func (x LogLevel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogLevel) IsValid() bool {
	_, err := ParseLogLevel(string(x))
	return err == nil
}

var _LogLevelValue = map[string]LogLevel{
	"panic": LogLevelPanic,
	"fatal": LogLevelFatal,
	"error": LogLevelError,
	"warn":  LogLevelWarn,
	"info":  LogLevelInfo,
	"debug": LogLevelDebug,
	"trace": LogLevelTrace,
}

// ParseLogLevel attempts to convert a string to a LogLevel.
func ParseLogLevel(name string) (LogLevel, error) {
	if x, ok := _LogLevelValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LogLevelValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return LogLevel(""), fmt.Errorf("%s is %w", name, ErrInvalidLogLevel)
}
